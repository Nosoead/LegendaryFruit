using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class RewardTree : MonoBehaviour,IInteractable
{
    protected int rewardCount;
    protected float rewardGrade;
    [SerializeField] private Reward rewardPrefab;
    [SerializeField] private Transform spawnPositionsRoot;
    private List<Transform> spawnPositions = new List<Transform>();
    //private WeaponSO weaponData = null;

    //일단 테스트용으로 weaponData를 임시적으로 넣음
    [SerializeField] private WeaponSO weaponData = null;

    // 딕셔너리로 키값으로 Reward 가져옴(일단 안씀)
    private Dictionary<int, Reward> rewards;

    // 리소스매니저에서 SO형태인 무기정보 들고옴

    private void Awake()
    {   
        rewards = PoolManager.Instance.rewards;
        for (int i = 0; i < spawnPositionsRoot.childCount; i++)
        {
            spawnPositions.Add(spawnPositionsRoot.GetChild(i));
        }
    }

    // 나무와 상호작용
    public void Interact(bool isDeepPressed, bool isPressed)
    {
        if (isDeepPressed || isPressed)
        {
            return;
            // pool지우기
        }
    }

    public void SetReward() // Lobby, Stage클리어 -> GamaManager에서 판단 후 호출
    {
        //랜덤 돌려서 보상 SO - > // TODO : Lobby 신선도 level/stage 따라서

        MakeReward(weaponData);
    }

    // SO 데이터를 열메에 넣는다.
    // TODO : 미리 위치에 생성하게끔 만들예정 그래서 리펙토링 필요
    private void MakeReward(WeaponSO weaponData)
    {
        // 열매생성
        for (int i = 0; i < spawnPositions.Count; i++)
        {
            var reward = PoolManager.Instance.CreatReward();
            Vector2 rewardSpawnPonint = spawnPositions[i].transform.position;
            reward.SetPosition(rewardSpawnPonint);
        }

        // Reward에서 위치 잡아준거 여기로

        // Reward에서 Data설정한거 여기로
        rewardPrefab.SetRewardData(weaponData);
    }
}
